{"name":"TabAnno","tagline":"TabAnno is an efficient variant annotation tool","body":"Contents\r\n--------\r\n\r\n[Introduction](#Introduction)\r\n\r\n[Quick tutorial](#Quick_tutorial)\r\n\r\n[Where to Find It](#Where_to_Find_It)\r\n\r\n[Usage](#Usage)\r\n\r\n-   [Command line](#Command_line)\r\n-   [Input files](#Input_files)\r\n-   [Parameters](#Parameters)\r\n\r\n[Example](#Example)\r\n\r\n-   [Built-in example](#Built-in_example)\r\n\r\n[Resources](#Resources)\r\n\r\n[Contact](#Contact)\r\n\r\n* * * * *\r\n\r\nIntroduction\r\n============\r\n\r\nTabAnno is short for \"Tab-delimited Annotation\", it is used for annotate variants. Our\r\ngoal is to provide abundant information for genetic variants promptly.\r\nFor example, annotations to all transcripts of a gene will be provided\r\ninstead of just listing one single annotation. TabAnno support various file\r\nformat: VCF file, plain file, plink association output file and\r\n[epacts](http://genome.sph.umich.edu/wiki/EPACTS \"http://genome.sph.umich.edu/wiki/EPACTS\")\r\nfile.\r\n\r\nTabAnno is a key component of [TASER]. The other component is SeqMiner, which helped to \r\nextract information, such as genotype, in R. [TASER] demonstrated how to annotate next-generation sequencing (NGS) data using TabAnno \r\nand statistically analyze the data using R.\r\n\r\n[TASER](http://www.zhanxw.com/taser)\r\n\r\nQuick tutorial\r\n==============\r\n\r\nYou have an input file in VCF format, and your goal is to annotate it\r\nusing refFlat genes database. Then you just need the following command:\r\n\r\n     anno -i input.vcf -o output.vcf -r hs37d5.fa -g refFlat_hg19.txt.gz -p priority.txt -c codon.txt\r\n\r\nRequired files:\r\n\r\n-   [hs37d5.fa](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa\")\r\n    Reference genome in NCBI build 37 (you also need to download\r\n    [hs37d5.fai](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa.fai \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa.fai\")\r\n    )\r\n\r\n-   [refFlag\\_hg19.txt.gz](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat_hg19.txt.gz \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat_hg19.txt.gz\")\r\n    Gene database in refFlat format (from UCSC website). You can also\r\n    use [Gencode version\r\n    7](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v7.gz \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v7.gz\")\r\n    or [Gencode version\r\n    11](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v11.gz \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v11.gz\").\r\n\r\n-   [codon.txt](http://www.sph.umich.edu/csg/zhanxw/software/anno/codon.txt \"http://www.sph.umich.edu/csg/zhanxw/software/anno/codon.txt\")\r\n    Human codon table.\r\n\r\n-   [priority.txt](http://www.sph.umich.edu/csg/zhanxw/software/anno/priority.txt \"http://www.sph.umich.edu/csg/zhanxw/software/anno/priority.txt\")\r\n    Priority file, which determines wich annotation type is more\r\n    important\r\n\r\nOutputs:\r\n\r\nAnnotated VCF will be named *output.vcf*. Annotations comes in two tags:\r\nANNO and ANNOFULL. The first tag ANNO showed the most important\r\nannotation types (determined by priority file); the second tag ANNOFULL\r\nshowed detailed annotations. Let's see one example annotation:\r\n\r\n    ANNO=Nonsynonymous:GENE1|GENE3;ANNOFULL=GENE1/CODING_GENE:+:Nonsynonymous(CCT/Pro/P->CAT/His/H:Base3/30:Codon1/10:Exon1/5):Normal_Splice_Site:Exon|GENE3/CODING_GENE:-:Nonsynonymous(AGG/Arg/R->ATG/Met/M:Base30/30:Codon10/10:Exon5/5):Normal_Splice_Site:Exon|GENE2/NON_CODING_GENE:+:Upstream\r\n\r\nANNO tag displayed the most important variant type is *Nonsynonymous*\r\nand that happened at GENE1 and GENE3; ANNOFULL tag is the full set of\r\nannotation and it consists of two parts, for GENE1 and GENE3\r\nrespectively. The first part is for GENE1:\r\n\r\n    GENE1/CODING_GENE:+:Nonsynonymous(CCT/Pro/P->CAT/His/H:Base3/30:Codon1/10:Exon1/5):Normal_Splice_Site:Exon\r\n\r\nThe format can be explained by sections, and we use annotation for GENE1\r\nas an example:\r\n\r\n-   GENE1 : gene name\r\n-   CODING\\_GENE : transcript name\r\n-   *+* : forward strand\r\n-   Nonsynonymous, Normal\\_Splice\\_Site, Exon : various annotation types\r\n-   CCT/Pro/P-\\>CAT/His/H : Proline to Histidine mutation\r\n-   Base3/30 : mutation happens on the 3rd base of the total 10 bases\r\n-   Codon1/10 : mutation happens on the 1st codon of the total 10 codons\r\n-   Exon1/5 : mutation happens on the 1st exon of the total 5 exons\r\n\r\nWhere to Find It\r\n================\r\n\r\nTabAnno code is hosted online\r\n[anno](https://github.com/zhanxw/anno \"https://github.com/zhanxw/anno\").\r\nYou can download the source and compile (type 'make release').\r\n\r\nFor CSG internal users, the compiled executable file is at:\r\n/net/fantasia/home/zhanxw/anno/executable/anno\r\n\r\nThe source code is located at:/net/fantasia/home/zhanxw/anno You can\r\ntype 'make release' to compile your own executable file. Type \"make\r\ntest1\" or \"make test2\" will demonstrate the command line to annotate\r\nexample VCF files.\r\n\r\nUsage\r\n=====\r\n\r\nCommand line\r\n------------\r\n\r\nAfter you obtain the anno executable (either by compiling the source\r\ncode or by downloading the pre-compiled binary file), you will find the\r\nexecutable file under executable/anno.\r\n\r\nHere is the TabAnno help page by invoking `anno` without any command line\r\narguments:\r\n\r\n     some_linux_host > executable/anno\r\n    ..............................................       \r\n     ...      G(ene) A(nnotation)                ...     \r\n      ...      Xiaowei Zhan, Goncalo Abecasis     ...    \r\n       ...      zhanxw@umich.edu                    ...  \r\n        ...      Dec 2012                            ... \r\n         ................................................\r\n                                                         \r\n    Required Parameters\r\n                           -i : Specify input VCF file\r\n                           -o : Specify output VCF file\r\n    Gene Annotation Parameters\r\n                           -g : Specify gene file\r\n                           -r : Specify reference genome position\r\n                --inputFormat : Specify format (default: vcf). \"-f plain \" will use fir\r\n                                st 4 columns as chrom, pos, ref, alt\r\n             --checkReference : Check whether reference alleles matches genome reference\r\n                           -f : Specify gene file format (default: refFlat, other optio\r\n                                ns: knownGene, refGene)\r\n                           -p : Specify priority of annotations\r\n                           -c : Specify codon file (default: codon.txt)\r\n                           -u : Specify upstream range (default: 50)\r\n                           -d : Specify downstream range (default: 50)\r\n                         --se : Specify splice into extron range (default: 3)\r\n                         --si : Specify splice into intron range (default: 8)\r\n               --outputFormat : Specify predefined annotation words (default or epact)\r\n    Other Annotation Tools\r\n                --genomeScore : Specify the folder of genome score (e.g. GERP=dirGerp/,\r\n                                SIFT=dirSift/)\r\n                        --bed : Specify the bed file and tag (e.g. ONTARGET1=a1.bed,ONT\r\n                                ARGET2=a2.bed)\r\n                      --tabix : Specify the tabix file and tag (e.g. abc.txt.gz(chrom=1\r\n                                ,pos=7,ref=3,alt=4,SIFT=7,PolyPhen=10)\r\n    Please specify input file\r\n\r\nInput files\r\n-----------\r\n\r\nTabAnno runs on the input VCF file specified on the command-line using flag\r\n'-i'.\r\n\r\nAdditionally, you need to specify gene file using flag '-g'. You can use\r\nthe default refFlat file (using HG19 genome build):\r\n/net/fantasia/home/zhanxw/anno/refFlat\\_hg19.txt.gz\r\n\r\nParameters\r\n----------\r\n\r\nSome of the command line parameters are described here, but most are\r\nself explanatory.\r\n\r\n-   Reference genome file\r\n\r\n<!-- -->\r\n\r\n    -r Specify a FASTA format reference genome file.\r\n\r\nSpecify *-r* option enable TabAnno to give more detailed information, for\r\nexample, instead of annotating a variant as exon, it will tell you which\r\ncodon, which exon that variant locates, whether its\r\nsynonymous/non-synonymous and etc.\r\n\r\nAnno requires Fasta index file and that will save running memory and\r\nspeed up annotation. You can use \"samtools faidx XXX.fa\" to generate\r\nFasta index file.\r\n\r\nFor example, you can specify Fasta file of the whole genome and use \"-r\r\n/data/local/ref/karma.ref/human.g1k.v37.fa\"\r\n\r\n-   Gene file format\r\n\r\nCurrently, TabAnno support gene file in refFlat format. A prepared list of\r\nall gene obtained of UCSC website is:\r\n\"/net/fantasia/home/zhanxw/anno/refFlat\\_hg19.txt.gz\" . To use that\r\nfile, you use flag *-g*.\r\n\r\nAs anno support refFlat file by default, you can use refFlat format\r\nwithout specify gene format flag *-f*.\r\n\r\nTo use knownGene or refGene format, you need to specify both *-g* and\r\n*-f* flat to tell TabAnno which gene file and which format it is. For\r\nexample, *-g /net/fantasia/home/zhanxw/anno/knownGene.txt.gz -f\r\nknownGene*.\r\n\r\n-   Codon file\r\n\r\nCodon file can tell the relationship between triplet codons and amino\r\nacids. A default file is located in:\r\n*/net/fantasia/home/zhanxw/anno/codon.txt*. If you have special codon\r\nfile, you can specify that using flag *-c*, otherwise, TabAnno will use the\r\ndefault codon file:\r\n\r\n*default codon file*\r\n\r\n    # DNA codon table. Stop codon is coded as: Stp, O, Stop\r\n    #Codon      AminoAcid   Letter   FullName\r\n    AAA     Lys     K       Lysine\r\n    AAC     Asn     N       Asparagine\r\n    AAG     Lys     K       Lysine\r\n    AAT     Asn     N       Asparagine\r\n    ACA     Thr     T       Threonine\r\n    ...\r\n\r\n-   Annotation ranges\r\n\r\n<!-- -->\r\n\r\n    -u how far apart from 5'-end of the gene are counted as upstream\r\n    -d how far apart from 3'-end of the gene are counted as downstream\r\n\r\nThe *-u* and *-d* parameters define the range of upstream and\r\ndownstream.\r\n\r\n    -se how far apart from 5'-end of the gene are counted as upstream\r\n    -si how far apart from 3'-end of the gene are counted as upstream\r\n\r\nThe *-se* and *-si* defines the splice region. By default, 3 bases into\r\nthe exon and 8 bases into the introns are defined as splicing sites. If\r\nmutations happen in these regions, we will annotate it as\r\n\"Normal\\_Splice\\_Site\" unless the mutations happens in the traditionally\r\nimportant \"GU...AG\" region in the intron, in that case, we will\r\n\"Essential\\_Splice\\_Site\" as annotation.\r\n\r\n-   Annotate by range\r\n\r\n<!-- -->\r\n\r\n                        --bed : Specify the bed file and tag (e.g. ONTARGET1=a1.bed,ONTARGET2=a2.bed)\r\n\r\nBED file is commonly used to represent range. Here you will check if\r\ncertain genome position is contained in one or more ranges specified in\r\nthe BED format. An example BED file, example.bed, is as follows:\r\n\r\n    1 10 20 a\r\n    1 15 40 b\r\n\r\nThere are two ranges: range a is from chromsome 1 position 10\r\n(inclusive) to chromosome 1 position 20 (exclusive); range b is from\r\nchromsome 1 position 15 (inclusive) to chromosome 1 position 40\r\n(exclusive).\r\n\r\nWhen use *--bed ONTARGET=example.bed* as parameter, the output may look\r\nlike this: *ONTARGET=a,b* in the VCF INFO field.\r\n\r\n-   Annotate by genome score\r\n\r\n<!-- -->\r\n\r\n                --genomeScore : Specify the folder of genome score (e.g. GERP=dirGerp/,SIFT=dirSift/)\r\n\r\nGenome score is a special binary file format (designed by Hyun) storing\r\nper-position genome score, such as GERP score, SIFT score. You will need\r\nto pre-process those scores in a directory. To annotate genome score,\r\nuse *--genomeScore TAG\\_NAME=DIRECTORY*. In VCF output file, you will\r\nhave *TAG\\_NAME=some\\_value* in the INFO field. In other output format,\r\nyou will see a separate column.\r\n\r\n-   Annotate by tabix input\r\n\r\n<!-- -->\r\n\r\n                      --tabix : Specify the tabix file and tag (e.g. abc.txt.gz(chrom=1,pos=7,ref=3,alt=4,SIFT=7,PolyPhen=10)\r\n\r\nTabix file can be used in annotation. Here we required you provide\r\nbgzipped, indexed file. In above example, we use abc.txt.gz as input,\r\nand column 1,7,3,4 as chromosome, position, reference allele,\r\nalternative allele. We also use column 7 as SIFT score and column 10 as\r\nPolyPhen score. Similar syntax as previous, you will get outputs similar\r\nto 'SIFT=0.110;PolyPhen=0.00' in the VCF INFO field. NOTE, in bash,\r\nplease use quote around parenthesis, otherwise parenthesis is not\r\ncorrectly treated. A working example is as follows:\r\n\r\n    --tabix '/net/fantasia/home/hmkang/bin/annovar/humandb/hg19_ljb_all.txt.gz(chrom=1,pos=2,ref=4,alt=5,mySift=6,mySC=7,myPP2=8,myPC=9)' \r\n\r\n\r\nExample\r\n=======\r\n\r\nTabAnno can annotate a VCF file and also output statistics of 4 frequency\r\ntable: annotation type; base change; codon change; indel size. More\r\ndetails will be given below.\r\n\r\nBuilt-in example\r\n----------------\r\n\r\nIn example/ folder, you can see test.vcf, which is a toy example. You\r\ncan invoke TabAnno using the following command line:\r\n\r\n    cd example; ./anno -i test.vcf -r test.fa -g test.gene.txt -c ../codon.txt -o test.out.vcf\r\n\r\nSample outputs are listed below:\r\n\r\n\\1) Annotated VCF file, *test.out.vcf*\r\n\r\n    #VCF_test\r\n    #from http://www.sph.umich.edu/csg/liyanmin/vcfCodingSnps/Tutorial.shtml\r\n    #CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT  NA12891 NA12892 NA12878\r\n    1       3       .       A       G       50      depth=20        ANNO=GENE1/CODING_GENE:+:Exon:Utr5:Normal_Splice_Site|GENE3/CODING_GENE:-:Exon:Utr3:Normal_Splice_Site|GENE2/NON_CODING_GENE:+:Upstream GT:GQ:GD        1/0:31:12       0/0:28:14\r\n    1       5       .       C       A       50      depth=20        ANNO=GENE1/CODING_GENE:+:Exon:Nonsynonymous(CCT/Pro/P->CAT/His/H:Base3/30:Codon1/10:Exon1/5):Normal_Splice_Site|GENE3/CODING_GENE:-:Exon:Nonsynonymous(AGG/Arg/R->ATG/Met/M:Base30/30:Codon10/10:Exon5/5):Normal_Splice_Site|GENE2/NON_CODING_GENE:+:Upstream   GT:GQ:GD        1/0:31:12       0/0:28:14\r\n    ...\r\n\r\nThe annotation results are stored in the INFO column after ANN= tag. The\r\nannotation format is defined as following:\r\n\r\n\"|\" separates different transcripts, e.g. in the first line, chromosome\r\n1 position 3, there are 3 annotations:\r\n\"GENE1/CODING\\_GENE:+:Exon:Utr5:Normal\\_Splice\\_Site\" and\r\n\"GENE3/CODING\\_GENE:-:Exon:Utr3:Normal\\_Splice\\_Site\" and\r\n\"GENE2/NON\\_CODING\\_GENE:+:Upstream\"\r\n\r\n\":\" separates within gene annotation in the following order: gene,\r\nstrand, exon/intron, details.\r\n\r\n\\2) Statistics files:\r\n\r\nFour frequency table will be generated after annotation. For example:\r\n\r\n*test.out.vcf.anno.frq*\r\n\r\n    Stop_Loss       1\r\n    Utr5    2\r\n    Utr3    2\r\n    CodonRegion     2\r\n    CodonGain       2\r\n    Frameshift      2\r\n    Synonymous      3\r\n    StructuralVariation     3\r\n    Noncoding       3\r\n    Nonsynonymous   4\r\n    Deletion        6\r\n    Upstream        6\r\n    Insertion       6\r\n    Essential_Splice_Site   8 \r\n    Downstream      8\r\n    Intron  12\r\n    Exon    21\r\n    Normal_Splice_Site      25\r\n\r\n*test.out.vcf.base.frq*\r\n\r\n    A->G    1\r\n    T->C    1\r\n    T->G    2\r\n    A->C    2\r\n    C->A    5\r\n\r\n*test.out.vcf.codon.frq*\r\n\r\n    Arg->Met        1\r\n    Pro->Thr        1\r\n    Arg->Arg        1\r\n    Pro->His        1\r\n    Gly->Gly        1\r\n    Pro->Pro        1\r\n    Stp->Tyr        1\r\n    Leu->Val        1\r\n\r\n*test.out.vcf.indel.frq*\r\n\r\n    1       1\r\n    -4      1\r\n    3       1\r\n    -3      1\r\n\r\nResources\r\n=========\r\n\r\n-   Reference genome in NCBI build 37 \r\n    [hs37d5.fa](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa\")\r\n    and its index file:\r\n    [hs37d5.fai](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa.fai \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/hs37d5.fa.fai\") \r\n\r\n-   Gene database\r\n    [refFlag\\_hg19.txt.gz](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat_hg19.txt.gz \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat_hg19.txt.gz\")\r\n    Gene database in refFlat format (from UCSC website). You can also\r\n    use [Gencode version 7](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v7.gz \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v7.gz\")\r\n    or [Gencode version\r\n    11](http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v11.gz \"http://www.sph.umich.edu/csg/zhanxw/software/anno/resources/refFlat.gencode.v11.gz\").\r\n\r\n-   Codon file (Human codon table.)\r\n    [codon.txt](http://www.sph.umich.edu/csg/zhanxw/software/anno/codon.txt \"http://www.sph.umich.edu/csg/zhanxw/software/anno/codon.txt\") \r\n    For other species with different codons, you need to modify its content.\r\n\r\n-   Annotation priority\r\n    Default priority file: [priority.txt](http://www.sph.umich.edu/csg/zhanxw/software/anno/priority.txt \"http://www.sph.umich.edu/csg/zhanxw/software/anno/priority.txt\")\r\n    The default priority file determines wich annotation type is more important. \r\n    This file affects the *ANNO* tag as it outputs the mutation with the highest priority.\r\n\r\n-   GERP score\r\n    Binary GERP score file (courtesy of Hyun Min Kang).\r\n\t\r\n-   dbNSFP file\r\n    Processed from dbNSFP website.\r\n\t\r\n\t\r\n\r\nContact\r\n=======\r\n\r\nQuestions and requests should be sent to Xiaowei Zhan\r\n([zhanxw@umich.edu](mailto:zhanxw@umich.edu \"mailto:zhanxw@umich.edu\"))\r\nor Goncalo Abecasis\r\n([goncalo@umich.edu](mailto:goncalo@umich.edu \"mailto:goncalo@umich.edu\"))\r\n\r\nAuthor sincerly appreicate Yanming Li for his wonderful tutorial on gene\r\nannotation software\r\n[vcfCodingSnps](http://www.sph.umich.edu/csg/liyanmin/vcfCodingSnps/Tutorial.shtml \"http://www.sph.umich.edu/csg/liyanmin/vcfCodingSnps/Tutorial.shtml\"),\r\nand Hyun Ming Kang for his code related to genome scores and his\r\nconsistent suggestions and feedbacks.\r\n","google":"UA-21871925-1","note":"Don't delete this file! It's used internally to help with page regeneration."}